/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_riemann_2eproto__INCLUDED
#define PROTOBUF_C_riemann_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _State State;
typedef struct _Event Event;
typedef struct _Query Query;
typedef struct _Msg Msg;
typedef struct _Attribute Attribute;


/* --- enums --- */


/* --- messages --- */

struct  _State
{
  ProtobufCMessage base;
  protobuf_c_boolean has_time;
  int64_t time;
  char *state;
  char *service;
  char *host;
  char *description;
  protobuf_c_boolean has_once;
  protobuf_c_boolean once;
  size_t n_tags;
  char **tags;
  protobuf_c_boolean has_ttl;
  float ttl;
};
#define STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__descriptor) \
    , 0,0, NULL, NULL, NULL, NULL, 0,0, 0,NULL, 0,0 }


struct  _Event
{
  ProtobufCMessage base;
  protobuf_c_boolean has_time;
  int64_t time;
  char *state;
  char *service;
  char *host;
  char *description;
  size_t n_tags;
  char **tags;
  protobuf_c_boolean has_ttl;
  float ttl;
  size_t n_attributes;
  Attribute **attributes;
  protobuf_c_boolean has_metric_sint64;
  int64_t metric_sint64;
  protobuf_c_boolean has_metric_d;
  double metric_d;
  protobuf_c_boolean has_metric_f;
  float metric_f;
};
#define EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event__descriptor) \
    , 0,0, NULL, NULL, NULL, NULL, 0,NULL, 0,0, 0,NULL, 0,0, 0,0, 0,0 }


struct  _Query
{
  ProtobufCMessage base;
  char *string;
};
#define QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query__descriptor) \
    , NULL }


struct  _Msg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ok;
  protobuf_c_boolean ok;
  char *error;
  size_t n_states;
  State **states;
  Query *query;
  size_t n_events;
  Event **events;
};
#define MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg__descriptor) \
    , 0,0, NULL, 0,NULL, NULL, 0,NULL }


struct  _Attribute
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define ATTRIBUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&attribute__descriptor) \
    , NULL, NULL }


/* State methods */
void   state__init
                     (State         *message);
size_t state__get_packed_size
                     (const State   *message);
size_t state__pack
                     (const State   *message,
                      uint8_t             *out);
size_t state__pack_to_buffer
                     (const State   *message,
                      ProtobufCBuffer     *buffer);
State *
       state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__free_unpacked
                     (State *message,
                      ProtobufCAllocator *allocator);
/* Event methods */
void   event__init
                     (Event         *message);
size_t event__get_packed_size
                     (const Event   *message);
size_t event__pack
                     (const Event   *message,
                      uint8_t             *out);
size_t event__pack_to_buffer
                     (const Event   *message,
                      ProtobufCBuffer     *buffer);
Event *
       event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event__free_unpacked
                     (Event *message,
                      ProtobufCAllocator *allocator);
/* Query methods */
void   query__init
                     (Query         *message);
size_t query__get_packed_size
                     (const Query   *message);
size_t query__pack
                     (const Query   *message,
                      uint8_t             *out);
size_t query__pack_to_buffer
                     (const Query   *message,
                      ProtobufCBuffer     *buffer);
Query *
       query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query__free_unpacked
                     (Query *message,
                      ProtobufCAllocator *allocator);
/* Msg methods */
void   msg__init
                     (Msg         *message);
size_t msg__get_packed_size
                     (const Msg   *message);
size_t msg__pack
                     (const Msg   *message,
                      uint8_t             *out);
size_t msg__pack_to_buffer
                     (const Msg   *message,
                      ProtobufCBuffer     *buffer);
Msg *
       msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg__free_unpacked
                     (Msg *message,
                      ProtobufCAllocator *allocator);
/* Attribute methods */
void   attribute__init
                     (Attribute         *message);
size_t attribute__get_packed_size
                     (const Attribute   *message);
size_t attribute__pack
                     (const Attribute   *message,
                      uint8_t             *out);
size_t attribute__pack_to_buffer
                     (const Attribute   *message,
                      ProtobufCBuffer     *buffer);
Attribute *
       attribute__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   attribute__free_unpacked
                     (Attribute *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*State_Closure)
                 (const State *message,
                  void *closure_data);
typedef void (*Event_Closure)
                 (const Event *message,
                  void *closure_data);
typedef void (*Query_Closure)
                 (const Query *message,
                  void *closure_data);
typedef void (*Msg_Closure)
                 (const Msg *message,
                  void *closure_data);
typedef void (*Attribute_Closure)
                 (const Attribute *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor state__descriptor;
extern const ProtobufCMessageDescriptor event__descriptor;
extern const ProtobufCMessageDescriptor query__descriptor;
extern const ProtobufCMessageDescriptor msg__descriptor;
extern const ProtobufCMessageDescriptor attribute__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_riemann_2eproto__INCLUDED */
